{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red246\green249\blue254;\red45\green52\blue75;
\red210\green0\blue5;\red0\green0\blue0;\red19\green118\blue70;\red9\green60\blue148;\red214\green0\blue5;
\red0\green0\blue255;\red144\green1\blue18;\red223\green33\blue121;\red140\green108\blue11;\red45\green175\blue118;
\red157\green0\blue210;\red167\green44\blue49;\red193\green160\blue9;\red11\green97\blue255;\red250\green104\blue19;
\red37\green154\blue53;\red187\green97\blue44;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c97255\c98039\c99608;\cssrgb\c23137\c26667\c36863;
\cssrgb\c86667\c0\c0;\cssrgb\c0\c0\c0;\cssrgb\c3529\c52549\c34510;\cssrgb\c1569\c31765\c64706;\cssrgb\c87843\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c63922\c8235\c8235;\cssrgb\c90980\c24314\c54902;\cssrgb\c61961\c49412\c3137;\cssrgb\c19608\c72941\c53725;
\cssrgb\c68627\c0\c85882;\cssrgb\c72157\c25098\c25098;\cssrgb\c80392\c68235\c784;\cssrgb\c0\c48235\c100000;\cssrgb\c99216\c49412\c7843;
\cssrgb\c15686\c65490\c27059;\cssrgb\c78824\c45882\c22353;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // SPDX-License-Identifier: MIT\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 pragma\cf4 \strokec4  \cf5 \strokec5 solidity\cf4 \strokec4  \cf6 \strokec6 ^\cf7 \strokec7 0.8.0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts@4.5.0/token/ERC721/ERC721.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts@4.5.0/token/ERC721/extensions/ERC721URIStorage.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts@4.5.0/access/Ownable.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  \cf8 \strokec8 "@openzeppelin/contracts@4.5.0/utils/Counters.sol"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  VerifyDevice \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  isApproved\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 //mapping submittedMetadata\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  FDA \cf6 \strokec6 =\cf4 \strokec4  \cf9 \strokec9 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  manufacturer \cf6 \strokec6 =\cf4 \strokec4  \cf8 \strokec8 "Manufacturer-A"\cf4 \strokec4  \cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  deviceName \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "Pacemaker"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  modelNumber \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "PM-A2SR05"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 uint\cf4 \strokec4  serialNumber \cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // constructor ()\{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 //     fee = 1 ether;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  metadata \cf6 \strokec6 =\cf4 \strokec4  \cf8 \strokec8 "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXVPiikMJ8u2NLgmgszg13pYrDKEoiu"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  MintRequested \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  addr\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  CheckingApproval \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  a\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  RequestForDeviceApproval \cf6 \strokec6 (\cf5 \strokec5 string\cf4 \strokec4  metadata\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  device\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  producer \cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 event\cf4 \strokec4  DeviceApprovedByFDA \cf6 \strokec6 (\cf10 \strokec10 address\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  device\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  model\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  approveDevice \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  user\cf6 \strokec6 )\cf4 \strokec4  \cf12 \strokec12 public\cf4 \strokec4  onlyFDA\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         isApproved\cf6 \strokec6 [\cf4 \strokec4 user\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  DeviceApprovedByFDA\cf6 \strokec6 (\cf4 \strokec4 user\cf6 \strokec6 ,\cf4 \strokec4  deviceName\cf6 \strokec6 ,\cf4 \strokec4  modelNumber\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 function\cf4 \strokec4  requestApproval \cf6 \strokec6 (\cf10 \strokec10 string\cf4 \strokec4  \cf13 \strokec13 memory\cf4 \strokec4  _deviceName\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 uint\cf4 \strokec4  serialNo\cf6 \strokec6 )\cf4 \strokec4  \cf14 \strokec14 public\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         serialNumber \cf6 \strokec6 =\cf4 \strokec4  serialNo\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  RequestForDeviceApproval \cf6 \strokec6 (\cf4 \strokec4 metadata\cf6 \strokec6 ,\cf4 \strokec4  deviceName\cf6 \strokec6 ,\cf4 \strokec4  manufacturer\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // function requestApproval () public payable \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 //     require(msg.value == fee);\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 //     emit RequestForDeviceApproval (metadata, deviceName, manufacturer);\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3     \cf2 \strokec2 // \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  checkApprvoal\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  user\cf6 \strokec6 )\cf4 \strokec4  \cf12 \strokec12 public\cf4 \strokec4  \cf12 \strokec12 view\cf4 \strokec4  \cf15 \strokec15 returns\cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\{\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 return\cf4 \strokec4  isApproved\cf6 \strokec6 [\cf4 \strokec4 user\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  createNFT \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _nft\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf6 \strokec6 )\cf4 \strokec4  \cf12 \strokec12 public\cf4 \strokec4  \cf15 \strokec15 returns\cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\{\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf16 \strokec16 require\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 isApproved \cf6 \strokec6 [\cf4 \strokec4 to\cf6 \strokec6 ],\cf8 \strokec8 "Device is not approved"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         isApproved\cf6 \strokec6 [\cf4 \strokec4 to\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 return\cf4 \strokec4  PacemakerNFT \cf6 \strokec6 (\cf4 \strokec4 _nft\cf6 \strokec6 ).\cf4 \strokec4 mintNFT\cf6 \strokec6 (\cf4 \strokec4 to\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 modifier\cf4 \strokec4  onlyFDA\cf6 \strokec6 ()\{\cf4 \strokec4  \cf2 \strokec2 //only sender who is the owner\cf4 \cb1 \strokec4 \
\cb3         \cf16 \strokec16 require\cf6 \strokec6 (\cf16 \strokec16 msg\cf6 \strokec6 .\cf4 \strokec4 sender \cf6 \strokec6 ==\cf4 \strokec4  FDA\cf6 \strokec6 );\cf4 \strokec4  \cb1 \
\cb3         _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  PacemakerNFT \cf5 \strokec5 is\cf4 \strokec4  ERC721\cf6 \strokec6 ,\cf4 \strokec4  ERC721URIStorage\cf6 \strokec6 ,\cf4 \strokec4  Ownable \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  Counters \cf17 \strokec17 for\cf4 \strokec4  Counters\cf6 \strokec6 .\cf4 \strokec4 Counter\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  deviceName \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "Pacemaker"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  modelNumber \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "PM-A2SR05"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  lockReason \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "NFT transfer function is locked until physical device is delivered to buyer"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  unlockDescription \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "Buyer received physical medical device"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 string\cf4 \strokec4  metadata \cf6 \strokec6 =\cf4 \strokec4  \cf11 \strokec11 "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXVPiikMJ8u2NLgmgszg13pYrDKEoiu"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3     Counters\cf6 \strokec6 .\cf4 \strokec4 Counter \cf12 \strokec12 private\cf4 \strokec4  _tokenIdCounter\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  verifierSC\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 event\cf4 \strokec4  NFTmintedForDevice\cf6 \strokec6 (\cf10 \strokec10 uint256\cf4 \strokec4  TokenId\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 address\cf4 \strokec4  Owner\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  DeviceName\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  ModelNo\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  Metadata \cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  OwnershipTransferred \cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  tokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 event\cf4 \strokec4  NFTtransferLocked \cf6 \strokec6 (\cf10 \strokec10 uint\cf4 \strokec4  TokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 string\cf4 \strokec4  Reason\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 event\cf4 \strokec4  NFTUnlocked \cf6 \strokec6 (\cf10 \strokec10 uint\cf4 \strokec4  TokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 address\cf4 \strokec4  Owner\cf6 \strokec6 ,\cf10 \strokec10 string\cf4 \strokec4  unlockDescription \cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 event\cf4 \strokec4  ReceiverConfirmsDelivery \cf6 \strokec6 (\cf10 \strokec10 uint\cf4 \strokec4  TokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 address\cf4 \strokec4  Receiver\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf12 \strokec12 constructor\cf6 \strokec6 ()\cf4 \strokec4  ERC721\cf6 \strokec6 (\cf11 \strokec11 "PacemakerNFT"\cf6 \strokec6 ,\cf4 \strokec4  \cf11 \strokec11 "PCMKR"\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         verifierSC \cf6 \strokec6 =\cf4 \strokec4  \cf9 \strokec9 0xd9145CCE52D386f254917e481eB44e9943F39138\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mintNFT\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  to\cf6 \strokec6 )\cf4 \strokec4  \cf12 \strokec12 public\cf4 \strokec4   \cf15 \strokec15 returns\cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\{\cf4 \strokec4  \cf2 \strokec2 //string memory uri\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  tokenId \cf6 \strokec6 =\cf4 \strokec4  _tokenIdCounter\cf6 \strokec6 .\cf4 \strokec4 current\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3         _tokenIdCounter\cf6 \strokec6 .\cf4 \strokec4 increment\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3         _safeMint\cf6 \strokec6 (\cf4 \strokec4 to\cf6 \strokec6 ,\cf4 \strokec4  tokenId\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  NFTmintedForDevice\cf6 \strokec6 (\cf4 \strokec4 tokenId\cf6 \strokec6 ,\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  deviceName\cf6 \strokec6 ,\cf4 \strokec4  modelNumber\cf6 \strokec6 ,\cf4 \strokec4  metadata\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 return\cf4 \strokec4  tokenId\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3        \cf2 \strokec2 // _setTokenURI(tokenId, uri);\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 function\cf4 \strokec4  transferOwnership\cf6 \strokec6 (\cf10 \strokec10 address\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 address\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf10 \strokec10 uint256\cf4 \strokec4  tokenID \cf6 \strokec6 )\cf4 \strokec4  \cf14 \strokec14 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         safeTransferFrom\cf6 \strokec6 (\cf4 \strokec4 from\cf6 \strokec6 ,\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  tokenID\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf4 \strokec4 tokenID\cf6 \strokec6 ,\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  to\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  NFTtransferLocked \cf6 \strokec6 (\cf4 \strokec4 tokenID\cf6 \strokec6 ,\cf4 \strokec4  lockReason\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 function\cf4 \strokec4  unlockNFT \cf6 \strokec6 (\cf10 \strokec10 uint\cf4 \strokec4  _tokenID\cf6 \strokec6 )\cf4 \strokec4  \cf14 \strokec14 public\cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  ReceiverConfirmsDelivery \cf6 \strokec6 (\cf4 \strokec4 _tokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf18 \strokec18 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 emit\cf4 \strokec4  NFTUnlocked\cf6 \strokec6 (\cf4 \strokec4 _tokenID\cf6 \strokec6 ,\cf4 \strokec4  \cf18 \strokec18 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  unlockDescription\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 // The following functions are overrides required by Solidity.\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _burn\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  tokenId\cf6 \strokec6 )\cf4 \strokec4  \cf12 \strokec12 internal\cf4 \strokec4  \cf19 \strokec19 override\cf6 \strokec6 (\cf4 \strokec4 ERC721\cf6 \strokec6 ,\cf4 \strokec4  ERC721URIStorage\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf20 \strokec20 super\cf6 \strokec6 .\cf4 \strokec4 _burn\cf6 \strokec6 (\cf4 \strokec4 tokenId\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  tokenURI\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  tokenId\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf12 \strokec12 public\cf4 \cb1 \strokec4 \
\cb3         \cf12 \strokec12 view\cf4 \cb1 \strokec4 \
\cb3         \cf19 \strokec19 override\cf6 \strokec6 (\cf4 \strokec4 ERC721\cf6 \strokec6 ,\cf4 \strokec4  ERC721URIStorage\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 string\cf4 \strokec4  \cf21 \strokec21 memory\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf15 \strokec15 return\cf4 \strokec4  \cf20 \strokec20 super\cf6 \strokec6 .\cf4 \strokec4 tokenURI\cf6 \strokec6 (\cf4 \strokec4 tokenId\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 modifier\cf4 \strokec4  onlyMinter\cf6 \strokec6 ()\{\cf4 \strokec4  \cf2 \strokec2 //only sender who is the owner\cf4 \cb1 \strokec4 \
\cb3         \cf16 \strokec16 require\cf6 \strokec6 (\cf16 \strokec16 msg\cf6 \strokec6 .\cf4 \strokec4 sender \cf6 \strokec6 ==\cf4 \strokec4  verifierSC\cf6 \strokec6 );\cf4 \strokec4  \cb1 \
\cb3         _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
}